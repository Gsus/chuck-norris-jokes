{"version":3,"sources":["ChuckNorrisPointing.png","components/Form.js","fist.svg","components/Jokes.js","App.js","index.js"],"names":["Form","setJokes","useState","category","setCategory","numberOfJokes","setNumberOfJokes","isFetching","setIsFetching","error","setError","fetchUrl","onSubmit","e","fetch","then","res","json","data","value","catch","setTimeout","preventDefault","id","onChange","target","name","type","min","max","step","className","Jokes","jokes","resetJokes","onClick","map","joke","src","fist","alt","he","decode","App","href","ChuckImg","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAAe,G,MAAA,IAA0B,iD,OC2F1BA,EAzFF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACGC,mBAAS,UADZ,mBACtBC,EADsB,KACZC,EADY,OAESF,mBAAS,GAFlB,mBAE1BG,EAF0B,KAEXC,EAFW,OAGGJ,oBAAS,GAHZ,mBAG1BK,EAH0B,KAGdC,EAHc,OAIPN,oBAAS,GAJF,mBAI1BO,EAJ0B,KAInBC,EAJmB,KAQzBC,EAAQ,UADK,uCAgCjB,OACE,uBAAMC,SA9Ba,SAACC,GAEpBL,GAAc,GAGZG,GADe,WAAbR,EACUE,EAGJ,UAAOA,EAAP,qBAAiCF,EAAjC,KAIVW,MAAMH,GACHI,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAELjB,EAASiB,EAAKC,UAEfC,OAAM,WACLV,GAAS,GAETW,YAAW,WACTX,GAAS,GACTF,GAAc,KACb,SAEPK,EAAES,kBAIF,UAEE,sBAAKC,GAAG,WAAR,UACE,oDACA,yBACEJ,MAAOhB,EACPqB,SAAU,SAACX,GAAD,OAAOT,EAAYS,EAAEY,OAAON,QACtCO,KAAK,WAHP,UAKE,wBAAQP,MAAM,SAAd,oBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,iBAAd,kCAIJ,sBAAKI,GAAG,eAAR,UACE,oDACA,uBACEI,KAAK,SACLC,IAAI,IACJC,IAAI,MACJC,MAAI,EACJX,MAAOd,EACPmB,SAAU,SAACX,GAAD,OAAOP,EAAiBO,EAAEY,OAAON,aAK9Cd,GAAiB,IAAMA,EAAgB,IAAM,uEAC7CA,GAAiB,IAAuB,IAAjBA,GAAuBA,EAAgB,KAAO,6EACpD,IAAjBA,GAAuB,yCACN,KAAjBA,GAAwB,+GAAiF,uBAAjF,6CAGxBI,GAAS,uBAAOc,GAAG,QAAV,uEAEV,uBAAOI,KAAK,SAASR,MAAM,YAAYY,UAAU,MAAMR,GAAG,cAGzDhB,GACD,sBAAKgB,GAAG,UAAR,UACE,wBACA,+BCrFO,MAA0B,iC,gBCsB1BS,EAlBD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACtB,OACE,gCACE,wBAAQC,QAASD,EAAYH,UAAU,MAAvC,2BACA,qBAAKR,GAAG,QAAR,SACGU,EAAMG,KAAI,SAACC,GAAD,OACX,sBAAKN,UAAU,OAAf,UACE,qBAAKO,IAAKC,EAAMC,IAAI,YAAYT,UAAU,SAC1C,mBAAGA,UAAU,YAAb,SACGU,IAAGC,OAAOL,EAAKA,UAHOA,EAAKd,aCiBzBoB,MArBf,WAAgB,IAAD,EACazC,mBAAS,MADtB,mBACN+B,EADM,KACChC,EADD,KAGb,OACE,sBAAK8B,UAAU,MAAf,UACE,wBAAOR,GAAG,SAAV,sBAA4B,mBAAGqB,KAAK,0BAA0BnB,OAAO,SAAzC,uCAE5B,8DAGEQ,EACA,cAAC,EAAD,CACEA,MAAOA,EACPC,WAAY,kBAAMjC,EAAS,SAHrB,cAAC,EAAD,CAAMA,SAAUA,IAM1B,qBAAKqC,IAAKO,EAAUtB,GAAG,qBAAqBiB,IAAI,gHCjBtDM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9374f15d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ChuckNorrisPointing.92800109.png\";","import { useState } from \"react\";\n\nconst Form = ({ setJokes }) => {\n  const [category, setCategory] = useState(\"random\"),\n    [numberOfJokes, setNumberOfJokes] = useState(1),\n    [isFetching, setIsFetching] = useState(false),\n    [error, setError] = useState(false),\n    // Example url. 1 random, explicit joke\n    // http://api.icndb.com/jokes/random/1?limitTo=[explicit]\";\n    API_BASE_URL = \"https://api.icndb.com/jokes/random/\";\n  let fetchUrl = `${API_BASE_URL}`;\n\n  const handleSubmit = (e) => {\n    // Show the spinner\n    setIsFetching(true);\n    // If category is just \"random\", just append the numberOfJokes at the end of the URL\n    if (category === \"random\") {\n      fetchUrl += numberOfJokes;\n    } else {\n      // do the above and specify which category.\n      fetchUrl += `${numberOfJokes}?limitTo=[${category}]`;\n    }\n\n    // Get the jokes\n    fetch(fetchUrl)\n      .then((res) => res.json())\n      .then((data) => {\n        // The \"value\" property contains the array of jokes.\n        setJokes(data.value);\n      })\n      .catch(() => {\n        setError(true);\n        // After ~3.5s, hide the error and the loading spinner\n        setTimeout(() => {\n          setError(false);\n          setIsFetching(false);\n        }, 3500);\n      });\n    e.preventDefault();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n\n      <div id=\"category\">\n        <label>Which category?</label>\n        <select\n          value={category}\n          onChange={(e) => setCategory(e.target.value)}\n          name=\"category\"\n        >\n          <option value=\"random\">Random</option>\n          <option value=\"nerdy\">Nerdy</option>\n          <option value=\"explicit\">Explicit</option>\n          <option value=\"nerdy,explicit\">Nerdy/Explicit</option>\n        </select>\n      </div>\n\n      <div id=\"num-of-jokes\"> \n        <label>How many jokes?</label>\n        <input\n          type=\"number\"\n          min=\"1\"\n          max=\"100\"\n          step\n          value={numberOfJokes}\n          onChange={(e) => setNumberOfJokes(e.target.value)}\n        />\n      </div>\n\n      {/* Display a message depending on a range of jokes, before submitting. Just joking around; don't mind this. */}\n      {numberOfJokes >= 30 && numberOfJokes < 60 && <small>Someone's got some free time, huh?</small>}\n      {numberOfJokes >= 60 && numberOfJokes != 69 && numberOfJokes < 100 && <small>Damn, you really are looking for a laugh</small>}\n      {numberOfJokes == 69 && <small>Nice</small>}\n      {numberOfJokes == 100 && <small>Chuck would be proud of you, but let's keep it a 100 at a time, shall we? <br/>Do tell me if you made it this far, tho</small>}\n\n      {/* Show an error if there is one when getting the jokes*/}\n      {error && <small id=\"error\">There's been an error while getting the jokes. Try again!</small>}\n\n      <input type=\"submit\" value=\"Get jokes\" className=\"btn\" id=\"fetch-btn\"/>\n\n      {/* If it's getting the jokes, show the \"loading\" spinner */}\n      {isFetching && \n      <div id=\"spinner\">\n        <div></div>\n        <div></div>\n      </div>}\n    </form>\n  );\n};\n\nexport default Form;\n","export default __webpack_public_path__ + \"static/media/fist.cd46272f.svg\";","import fist from '../fist.svg';\n// HTML entity encoder/decoder\nimport he from 'he';\n\nconst Jokes = ({ jokes, resetJokes }) => {\n  return (\n    <div>\n      <button onClick={resetJokes} className=\"btn\">Get new jokes</button>\n      <div id=\"jokes\">\n        {jokes.map((joke) => (\n        <div className=\"joke\" key={joke.id}>\n          <img src={fist} alt=\"Fist icon\" className=\"icon\"/>\n          <p className=\"joke-text\">\n            {he.decode(joke.joke)}\n          </p>\n        </div>\n        ))}\n      </div>\n    </div>\n  )\n};\n\nexport default Jokes;","import \"./App.scss\";\nimport ChuckImg from './ChuckNorrisPointing.png';\nimport { useState } from \"react\";\nimport Form from \"./components/Form\";\nimport Jokes from \"./components/Jokes\";\n\nfunction App() {\n  const [jokes, setJokes] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <small id=\"author\">Coded by <a href=\"https://gsus.github.io/\" target=\"_blank\">Jesús Sánchez B.</a></small>\n\n      <h1>Chuck Norris Jokes Generator</h1>\n      { /* If there aren't jokes, render the form,\n      Otherwise, show the jokes. */}\n      {!jokes ? <Form setJokes={setJokes} /> : \n        <Jokes \n          jokes={jokes} \n          resetJokes={() => setJokes(null)}\n        />\n      }\n      <img src={ChuckImg} id=\"chuck-pointing-img\" alt=\"Chuck Norris dressed like a sheriff, pointing and looking at the camera, like softly warning the viewer\"/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}